
	function init() {
		// Instanciate sigma.js and customize rendering :
		var sigInst = sigma.init(document.getElementById('sigma-example')).drawingProperties({
			defaultLabelColor: '#fff',
			defaultLabelSize: 14,
			defaultLabelBGColor: '#fff',
			defaultLabelHoverColor: '#000',
			labelThreshold: 6,
			defaultEdgeType: 'line'
		}).graphProperties({
			minNodeSize: 1,
			maxNodeSize: 7,
			minEdgeSize: 1,
			maxEdgeSize: 1
		}).mouseProperties({
			maxRatio: 20
		});

	// Parse a GEXF encoded file to fill the graph
	// (requires "sigma.parseGexf.js" to be included)
		sigInst.parseGexf('data/data.gexf');

	// Bind events :
		sigInst.bind('overnodes',function(event){
			var neighbors = {};
			var index = null;
			node_id = parseInt(event.content[0])
			for(i=0;i<groups.length;i++){
				if(groups[i].indexOf(node_id)>=0){
					index = i;
					break;
				}
			}

			if(index == null)
				nodes = [];
			else
				nodes = groups[index];

			sigInst.iterEdges(function(e){
				if(nodes.indexOf(parseInt(e.source))>=0 || nodes.indexOf(parseInt(e.target))>=0){
					neighbors[e.source] = 1;
					neighbors[e.target] = 1;
					//console.log(e.source)
				}
				}).iterNodes(function(n){
					if(!neighbors[n.id] && n.id != nodes ){
					//Edit by susang
					n.hidden = 0;
					n.color = change_alpha(n.color, "0.2")
					}else{
					n.hidden = 0;
					}
				}).draw(2,2,2);
			}).bind('outnodes',function(){
				sigInst.iterEdges(function(e){
					e.hidden = 0;
				}).iterNodes(function(n){
				//Edit by susang
					n.hidden = 0;
					n.color = change_alpha(n.color, "1.0")
				}).draw(2,2,2);
				nodes = null
			})
			// Draw the graph :
			sigInst.draw();
		}

		if (document.addEventListener) {
			document.addEventListener("DOMContentLoaded", init, false);
		} else {
			window.onload = init;
		}

	//chage rbga alpha

	function change_alpha(color_string, a_value){
		var c = color_string.toString()
		var str = c.substr(0, c.length-5) + "," + a_value + ")"
		return str

	}


